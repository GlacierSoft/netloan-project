<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.glacier.netloan.dao.member.MemberInvestmentMapper" >
  <resultMap id="BaseResultMap" type="com.glacier.netloan.entity.member.MemberInvestment" >
    <id column="temp_member_investment_lend_id" property="lendId" jdbcType="VARCHAR" />
    <result column="temp_member_investment_member_id" property="memberId" jdbcType="VARCHAR" />
    <result column="temp_member_investment_total_borrowings" property="totalBorrowings" jdbcType="REAL" />
    <result column="temp_member_investment_cumulative_loss_profit" property="cumulativeLossProfit" jdbcType="REAL" />
    <result column="temp_member_investment_already_total" property="alreadyTotal" jdbcType="REAL" />
    <result column="temp_member_investment_wait_also_total" property="waitAlsoTotal" jdbcType="REAL" />
    <result column="temp_member_investment_borrow_success" property="borrowSuccess" jdbcType="INTEGER" />
    <result column="temp_member_investment_normal_repayment" property="normalRepayment" jdbcType="INTEGER" />
    <result column="temp_member_investment_advance_repayment" property="advanceRepayment" jdbcType="INTEGER" />
    <result column="temp_member_investment_late_repayment" property="lateRepayment" jdbcType="INTEGER" />
    <result column="temp_member_investment_late" property="late" jdbcType="INTEGER" />
    <result column="temp_member_investment_website_substitute" property="websiteSubstitute" jdbcType="INTEGER" />
    <result column="temp_member_investment_investment_total" property="investmentTotal" jdbcType="REAL" />
    <result column="temp_member_investment_tender_awards" property="tenderAwards" jdbcType="REAL" />
    <result column="temp_member_investment_already_income_total" property="alreadyIncomeTotal" jdbcType="REAL" />
    <result column="temp_member_investment_wait_income_total" property="waitIncomeTotal" jdbcType="REAL" />
    <result column="temp_member_investment_promotion_awards" property="promotionAwards" jdbcType="REAL" />
    <result column="temp_member_investment_upline_delta_awards" property="uplineDeltaAwards" jdbcType="REAL" />
    <result column="temp_member_investment_continue_awards" property="continueAwards" jdbcType="REAL" />
    <result column="temp_member_investment_creater" property="creater" jdbcType="VARCHAR" />
    <result column="temp_member_investment_creater_time" property="createrTime" jdbcType="TIMESTAMP" />
    <result column="temp_member_investment_updater" property="updater" jdbcType="VARCHAR" />
    <result column="temp_member_investment_update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    temp_member_investment.lend_id as temp_member_investment_lend_id, temp_member_investment.member_id as temp_member_investment_member_id, 
    temp_member_investment.total_borrowings as temp_member_investment_total_borrowings, 
    temp_member_investment.cumulative_loss_profit as temp_member_investment_cumulative_loss_profit, 
    temp_member_investment.already_total as temp_member_investment_already_total, temp_member_investment.wait_also_total as temp_member_investment_wait_also_total, 
    temp_member_investment.borrow_success as temp_member_investment_borrow_success, temp_member_investment.normal_repayment as temp_member_investment_normal_repayment, 
    temp_member_investment.advance_repayment as temp_member_investment_advance_repayment, 
    temp_member_investment.late_repayment as temp_member_investment_late_repayment, temp_member_investment.late as temp_member_investment_late, 
    temp_member_investment.website_substitute as temp_member_investment_website_substitute, 
    temp_member_investment.investment_total as temp_member_investment_investment_total, 
    temp_member_investment.tender_awards as temp_member_investment_tender_awards, temp_member_investment.already_income_total as temp_member_investment_already_income_total, 
    temp_member_investment.wait_income_total as temp_member_investment_wait_income_total, 
    temp_member_investment.promotion_awards as temp_member_investment_promotion_awards, 
    temp_member_investment.upline_delta_awards as temp_member_investment_upline_delta_awards, 
    temp_member_investment.continue_awards as temp_member_investment_continue_awards, 
    temp_member_investment.creater as temp_member_investment_creater, temp_member_investment.creater_time as temp_member_investment_creater_time, 
    temp_member_investment.updater as temp_member_investment_updater, temp_member_investment.update_time as temp_member_investment_update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.glacier.netloan.entity.member.MemberInvestmentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_member_investment temp_member_investment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart >= 0" >
      limit ${limitStart} , ${limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_member_investment temp_member_investment
    where temp_member_investment.lend_id = #{lendId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from t_member_investment
    where lend_id = #{lendId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.glacier.netloan.entity.member.MemberInvestmentExample" >
    delete from t_member_investment temp_member_investment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.glacier.netloan.entity.member.MemberInvestment" >
    insert into t_member_investment (lend_id, member_id, total_borrowings, 
      cumulative_loss_profit, already_total, wait_also_total, 
      borrow_success, normal_repayment, advance_repayment, 
      late_repayment, late, website_substitute, 
      investment_total, tender_awards, already_income_total, 
      wait_income_total, promotion_awards, upline_delta_awards, 
      continue_awards, creater, creater_time, 
      updater, update_time)
    values (#{lendId,jdbcType=VARCHAR}, #{memberId,jdbcType=VARCHAR}, #{totalBorrowings,jdbcType=REAL}, 
      #{cumulativeLossProfit,jdbcType=REAL}, #{alreadyTotal,jdbcType=REAL}, #{waitAlsoTotal,jdbcType=REAL}, 
      #{borrowSuccess,jdbcType=INTEGER}, #{normalRepayment,jdbcType=INTEGER}, #{advanceRepayment,jdbcType=INTEGER}, 
      #{lateRepayment,jdbcType=INTEGER}, #{late,jdbcType=INTEGER}, #{websiteSubstitute,jdbcType=INTEGER}, 
      #{investmentTotal,jdbcType=REAL}, #{tenderAwards,jdbcType=REAL}, #{alreadyIncomeTotal,jdbcType=REAL}, 
      #{waitIncomeTotal,jdbcType=REAL}, #{promotionAwards,jdbcType=REAL}, #{uplineDeltaAwards,jdbcType=REAL}, 
      #{continueAwards,jdbcType=REAL}, #{creater,jdbcType=VARCHAR}, #{createrTime,jdbcType=TIMESTAMP}, 
      #{updater,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.glacier.netloan.entity.member.MemberInvestment" >
    insert into t_member_investment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="lendId != null" >
        lend_id,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="totalBorrowings != null" >
        total_borrowings,
      </if>
      <if test="cumulativeLossProfit != null" >
        cumulative_loss_profit,
      </if>
      <if test="alreadyTotal != null" >
        already_total,
      </if>
      <if test="waitAlsoTotal != null" >
        wait_also_total,
      </if>
      <if test="borrowSuccess != null" >
        borrow_success,
      </if>
      <if test="normalRepayment != null" >
        normal_repayment,
      </if>
      <if test="advanceRepayment != null" >
        advance_repayment,
      </if>
      <if test="lateRepayment != null" >
        late_repayment,
      </if>
      <if test="late != null" >
        late,
      </if>
      <if test="websiteSubstitute != null" >
        website_substitute,
      </if>
      <if test="investmentTotal != null" >
        investment_total,
      </if>
      <if test="tenderAwards != null" >
        tender_awards,
      </if>
      <if test="alreadyIncomeTotal != null" >
        already_income_total,
      </if>
      <if test="waitIncomeTotal != null" >
        wait_income_total,
      </if>
      <if test="promotionAwards != null" >
        promotion_awards,
      </if>
      <if test="uplineDeltaAwards != null" >
        upline_delta_awards,
      </if>
      <if test="continueAwards != null" >
        continue_awards,
      </if>
      <if test="creater != null" >
        creater,
      </if>
      <if test="createrTime != null" >
        creater_time,
      </if>
      <if test="updater != null" >
        updater,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="lendId != null" >
        #{lendId,jdbcType=VARCHAR},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=VARCHAR},
      </if>
      <if test="totalBorrowings != null" >
        #{totalBorrowings,jdbcType=REAL},
      </if>
      <if test="cumulativeLossProfit != null" >
        #{cumulativeLossProfit,jdbcType=REAL},
      </if>
      <if test="alreadyTotal != null" >
        #{alreadyTotal,jdbcType=REAL},
      </if>
      <if test="waitAlsoTotal != null" >
        #{waitAlsoTotal,jdbcType=REAL},
      </if>
      <if test="borrowSuccess != null" >
        #{borrowSuccess,jdbcType=INTEGER},
      </if>
      <if test="normalRepayment != null" >
        #{normalRepayment,jdbcType=INTEGER},
      </if>
      <if test="advanceRepayment != null" >
        #{advanceRepayment,jdbcType=INTEGER},
      </if>
      <if test="lateRepayment != null" >
        #{lateRepayment,jdbcType=INTEGER},
      </if>
      <if test="late != null" >
        #{late,jdbcType=INTEGER},
      </if>
      <if test="websiteSubstitute != null" >
        #{websiteSubstitute,jdbcType=INTEGER},
      </if>
      <if test="investmentTotal != null" >
        #{investmentTotal,jdbcType=REAL},
      </if>
      <if test="tenderAwards != null" >
        #{tenderAwards,jdbcType=REAL},
      </if>
      <if test="alreadyIncomeTotal != null" >
        #{alreadyIncomeTotal,jdbcType=REAL},
      </if>
      <if test="waitIncomeTotal != null" >
        #{waitIncomeTotal,jdbcType=REAL},
      </if>
      <if test="promotionAwards != null" >
        #{promotionAwards,jdbcType=REAL},
      </if>
      <if test="uplineDeltaAwards != null" >
        #{uplineDeltaAwards,jdbcType=REAL},
      </if>
      <if test="continueAwards != null" >
        #{continueAwards,jdbcType=REAL},
      </if>
      <if test="creater != null" >
        #{creater,jdbcType=VARCHAR},
      </if>
      <if test="createrTime != null" >
        #{createrTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.glacier.netloan.entity.member.MemberInvestmentExample" resultType="java.lang.Integer" >
    select count(*) from t_member_investment temp_member_investment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_member_investment temp_member_investment
    <set >
      <if test="record.lendId != null" >
        temp_member_investment.lend_id = #{record.lendId,jdbcType=VARCHAR},
      </if>
      <if test="record.memberId != null" >
        temp_member_investment.member_id = #{record.memberId,jdbcType=VARCHAR},
      </if>
      <if test="record.totalBorrowings != null" >
        temp_member_investment.total_borrowings = #{record.totalBorrowings,jdbcType=REAL},
      </if>
      <if test="record.cumulativeLossProfit != null" >
        temp_member_investment.cumulative_loss_profit = #{record.cumulativeLossProfit,jdbcType=REAL},
      </if>
      <if test="record.alreadyTotal != null" >
        temp_member_investment.already_total = #{record.alreadyTotal,jdbcType=REAL},
      </if>
      <if test="record.waitAlsoTotal != null" >
        temp_member_investment.wait_also_total = #{record.waitAlsoTotal,jdbcType=REAL},
      </if>
      <if test="record.borrowSuccess != null" >
        temp_member_investment.borrow_success = #{record.borrowSuccess,jdbcType=INTEGER},
      </if>
      <if test="record.normalRepayment != null" >
        temp_member_investment.normal_repayment = #{record.normalRepayment,jdbcType=INTEGER},
      </if>
      <if test="record.advanceRepayment != null" >
        temp_member_investment.advance_repayment = #{record.advanceRepayment,jdbcType=INTEGER},
      </if>
      <if test="record.lateRepayment != null" >
        temp_member_investment.late_repayment = #{record.lateRepayment,jdbcType=INTEGER},
      </if>
      <if test="record.late != null" >
        temp_member_investment.late = #{record.late,jdbcType=INTEGER},
      </if>
      <if test="record.websiteSubstitute != null" >
        temp_member_investment.website_substitute = #{record.websiteSubstitute,jdbcType=INTEGER},
      </if>
      <if test="record.investmentTotal != null" >
        temp_member_investment.investment_total = #{record.investmentTotal,jdbcType=REAL},
      </if>
      <if test="record.tenderAwards != null" >
        temp_member_investment.tender_awards = #{record.tenderAwards,jdbcType=REAL},
      </if>
      <if test="record.alreadyIncomeTotal != null" >
        temp_member_investment.already_income_total = #{record.alreadyIncomeTotal,jdbcType=REAL},
      </if>
      <if test="record.waitIncomeTotal != null" >
        temp_member_investment.wait_income_total = #{record.waitIncomeTotal,jdbcType=REAL},
      </if>
      <if test="record.promotionAwards != null" >
        temp_member_investment.promotion_awards = #{record.promotionAwards,jdbcType=REAL},
      </if>
      <if test="record.uplineDeltaAwards != null" >
        temp_member_investment.upline_delta_awards = #{record.uplineDeltaAwards,jdbcType=REAL},
      </if>
      <if test="record.continueAwards != null" >
        temp_member_investment.continue_awards = #{record.continueAwards,jdbcType=REAL},
      </if>
      <if test="record.creater != null" >
        temp_member_investment.creater = #{record.creater,jdbcType=VARCHAR},
      </if>
      <if test="record.createrTime != null" >
        temp_member_investment.creater_time = #{record.createrTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updater != null" >
        temp_member_investment.updater = #{record.updater,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null" >
        temp_member_investment.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_member_investment temp_member_investment
    set temp_member_investment.lend_id = #{record.lendId,jdbcType=VARCHAR},
      temp_member_investment.member_id = #{record.memberId,jdbcType=VARCHAR},
      temp_member_investment.total_borrowings = #{record.totalBorrowings,jdbcType=REAL},
      temp_member_investment.cumulative_loss_profit = #{record.cumulativeLossProfit,jdbcType=REAL},
      temp_member_investment.already_total = #{record.alreadyTotal,jdbcType=REAL},
      temp_member_investment.wait_also_total = #{record.waitAlsoTotal,jdbcType=REAL},
      temp_member_investment.borrow_success = #{record.borrowSuccess,jdbcType=INTEGER},
      temp_member_investment.normal_repayment = #{record.normalRepayment,jdbcType=INTEGER},
      temp_member_investment.advance_repayment = #{record.advanceRepayment,jdbcType=INTEGER},
      temp_member_investment.late_repayment = #{record.lateRepayment,jdbcType=INTEGER},
      temp_member_investment.late = #{record.late,jdbcType=INTEGER},
      temp_member_investment.website_substitute = #{record.websiteSubstitute,jdbcType=INTEGER},
      temp_member_investment.investment_total = #{record.investmentTotal,jdbcType=REAL},
      temp_member_investment.tender_awards = #{record.tenderAwards,jdbcType=REAL},
      temp_member_investment.already_income_total = #{record.alreadyIncomeTotal,jdbcType=REAL},
      temp_member_investment.wait_income_total = #{record.waitIncomeTotal,jdbcType=REAL},
      temp_member_investment.promotion_awards = #{record.promotionAwards,jdbcType=REAL},
      temp_member_investment.upline_delta_awards = #{record.uplineDeltaAwards,jdbcType=REAL},
      temp_member_investment.continue_awards = #{record.continueAwards,jdbcType=REAL},
      temp_member_investment.creater = #{record.creater,jdbcType=VARCHAR},
      temp_member_investment.creater_time = #{record.createrTime,jdbcType=TIMESTAMP},
      temp_member_investment.updater = #{record.updater,jdbcType=VARCHAR},
      temp_member_investment.update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.glacier.netloan.entity.member.MemberInvestment" >
    update t_member_investment
    <set >
      <if test="memberId != null" >
        member_id = #{memberId,jdbcType=VARCHAR},
      </if>
      <if test="totalBorrowings != null" >
        total_borrowings = #{totalBorrowings,jdbcType=REAL},
      </if>
      <if test="cumulativeLossProfit != null" >
        cumulative_loss_profit = #{cumulativeLossProfit,jdbcType=REAL},
      </if>
      <if test="alreadyTotal != null" >
        already_total = #{alreadyTotal,jdbcType=REAL},
      </if>
      <if test="waitAlsoTotal != null" >
        wait_also_total = #{waitAlsoTotal,jdbcType=REAL},
      </if>
      <if test="borrowSuccess != null" >
        borrow_success = #{borrowSuccess,jdbcType=INTEGER},
      </if>
      <if test="normalRepayment != null" >
        normal_repayment = #{normalRepayment,jdbcType=INTEGER},
      </if>
      <if test="advanceRepayment != null" >
        advance_repayment = #{advanceRepayment,jdbcType=INTEGER},
      </if>
      <if test="lateRepayment != null" >
        late_repayment = #{lateRepayment,jdbcType=INTEGER},
      </if>
      <if test="late != null" >
        late = #{late,jdbcType=INTEGER},
      </if>
      <if test="websiteSubstitute != null" >
        website_substitute = #{websiteSubstitute,jdbcType=INTEGER},
      </if>
      <if test="investmentTotal != null" >
        investment_total = #{investmentTotal,jdbcType=REAL},
      </if>
      <if test="tenderAwards != null" >
        tender_awards = #{tenderAwards,jdbcType=REAL},
      </if>
      <if test="alreadyIncomeTotal != null" >
        already_income_total = #{alreadyIncomeTotal,jdbcType=REAL},
      </if>
      <if test="waitIncomeTotal != null" >
        wait_income_total = #{waitIncomeTotal,jdbcType=REAL},
      </if>
      <if test="promotionAwards != null" >
        promotion_awards = #{promotionAwards,jdbcType=REAL},
      </if>
      <if test="uplineDeltaAwards != null" >
        upline_delta_awards = #{uplineDeltaAwards,jdbcType=REAL},
      </if>
      <if test="continueAwards != null" >
        continue_awards = #{continueAwards,jdbcType=REAL},
      </if>
      <if test="creater != null" >
        creater = #{creater,jdbcType=VARCHAR},
      </if>
      <if test="createrTime != null" >
        creater_time = #{createrTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updater != null" >
        updater = #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where lend_id = #{lendId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.glacier.netloan.entity.member.MemberInvestment" >
    update t_member_investment
    set member_id = #{memberId,jdbcType=VARCHAR},
      total_borrowings = #{totalBorrowings,jdbcType=REAL},
      cumulative_loss_profit = #{cumulativeLossProfit,jdbcType=REAL},
      already_total = #{alreadyTotal,jdbcType=REAL},
      wait_also_total = #{waitAlsoTotal,jdbcType=REAL},
      borrow_success = #{borrowSuccess,jdbcType=INTEGER},
      normal_repayment = #{normalRepayment,jdbcType=INTEGER},
      advance_repayment = #{advanceRepayment,jdbcType=INTEGER},
      late_repayment = #{lateRepayment,jdbcType=INTEGER},
      late = #{late,jdbcType=INTEGER},
      website_substitute = #{websiteSubstitute,jdbcType=INTEGER},
      investment_total = #{investmentTotal,jdbcType=REAL},
      tender_awards = #{tenderAwards,jdbcType=REAL},
      already_income_total = #{alreadyIncomeTotal,jdbcType=REAL},
      wait_income_total = #{waitIncomeTotal,jdbcType=REAL},
      promotion_awards = #{promotionAwards,jdbcType=REAL},
      upline_delta_awards = #{uplineDeltaAwards,jdbcType=REAL},
      continue_awards = #{continueAwards,jdbcType=REAL},
      creater = #{creater,jdbcType=VARCHAR},
      creater_time = #{createrTime,jdbcType=TIMESTAMP},
      updater = #{updater,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where lend_id = #{lendId,jdbcType=VARCHAR}
  </update>
</mapper>